#!/bin/bash
{% autoescape None %}
export LUNA_TARBALL=''
export LUNA_OSIMAGE=''

function update_status {
    curl -s "http://{{ server_ip }}:{{ server_port }}/luna?step=install&node={{ p['name'] }}&status=$1"
}

function unpack_tarball {
    update_status "install.unpack"
    echo "Luna: Un-packing tarball"
    cd /sysroot
    if [ -n /luna/{{ p['torrent'] }} ]; then
        tar -xzf ./{{ p['tarball'] }} && export LUNA_OSIMAGE="yes"
    else
        echo "Luna: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
    kill -15 $(cat /luna/ltorrent-client.pid)
}

trap unpack_tarball SIGUSR1


function prescript {
    echo "Luna: Running prescript"
    update_status "install.prescript"
    {{ p['prescript'] }}
}

function partscript {
    echo "Luna: Running partscript"
    update_status "install.partscript"
    {{ p['partscript'] }}
}

function postscript {
    echo "Luna: Running postscript"
    update_status "install.postscript"
    {{ p['postscript'] }}
}

function download_torrent {
    echo "Luna: Downloading torrent"
    update_status "install.download"
    curl -s http://{{ server_ip }}:{{ server_port }}/torrents/{{ p['torrent'] }} > /luna/{{ p['torrent'] }}
    cd /sysroot
    > /luna/ltorrent-client.pid
    {% if bool(p['torrent_if']) %}
        {% if p['torrent_if'] != p['boot_if'] %}
            /usr/sbin/ip a add {{ p['torrent_if_ip'] }}/{{ p['torrent_if_net_mask'] }} dev {{ p['torrent_if'] }}
        {% end %}
        if ping -c 1 {{ p['torrent_if_ip'] }} >/dev/null 2>&1; then
            /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -b {{ p['torrent_if_ip'] }} -f /luna/ltorrent-client.pid &
        else
            /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -f /luna/ltorrent-client.pid &
        fi
        while [ -f /luna/ltorrent-client.pid ] ; do
            sleep 3
        done
        rm -f /sysroot/{{ p['tarball'] }}
        {% if p['torrent_if'] != p['boot_if'] %}
                /usr/sbin/ip addr flush {[ p['torrent_if'] }}
                /usr/sbin/ip link set dev {{ p['torrent_if'] }} down
        {% end %}
    {% else %}
        /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -f /luna/ltorrent-client.pid &
    {% end %}
    while [ -f /luna/ltorrent-client.pid ] ; do
        sleep 3
    done
    rm -rf /sysroot/{{ p['tarball'] }}

}
{% if bool(p['bmcsetup']) and p['setupbmc'] %}
function bmcsetup {
    echo "Luna: bmcsetup"
    update_status "install.setupbmc"
    modprobe ipmi_devintf
    modprobe ipmi_si
    modprobe ipmi_msghandler
    ipmitool lan set {{ p['bmcsetup']['netchannel'] }} ipsrc static
    ipmitool lan set {{ p['bmcsetup']['netchannel'] }} ipaddr {{ p['bmcsetup']['ip'] }}
    ipmitool lan set {{ p['bmcsetup']['netchannel'] }} netmask {{ p['bmcsetup']['netmask'] }}
    ipmitool lan set {{ p['bmcsetup']['netchannel'] }} defgw ipaddr 0.0.0.0
    sleep 5
    ipmitool user set name {{ p['bmcsetup']['userid'] }} {{ p['bmcsetup']['user'] }}
    ipmitool user set password {{ p['bmcsetup']['userid'] }} {{ p['bmcsetup']['password'] }}
    ipmitool channel setaccess {{ p['bmcsetup']['mgmtchannel'] }} {{ p['bmcsetup']['userid'] }} link=on ipmi=on callin=on privilege=4
    ipmitool user enable {{ p['bmcsetup']['userid'] }}
    ipmitool mc reset cold
}
{% end %}

function change_net {
    echo "Luna: change network settings"
    update_status "install.setnet"

    [ -z "$LUNA_OSIMAGE" ] && echo "Luna: No OsImage. Exiting." && return 0

    echo "{{ p['hostname'] }}" > /proc/sys/kernel/hostname
    echo "{{ p['hostname'] }}" > /sysroot/etc/hostname

    {% for interface in p['interfaces'] %}
    cat << EOF >> /sysroot/{{ p['interfaces'][interface]['file'] }}
{{ p['interfaces'][interface]['conf'] }}
EOF
    {% end %}
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /sysroot/tmp/fix_capabilities.lst << EOF
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
EOF
    chroot /sysroot /bin/bash -c " \
        while read FILE d CAP; do \
            /usr/sbin/setcap \${CAP} \${FILE}; \
        done < /tmp/fix_capabilities.lst \
    " >/dev/null 2>&1
    rm -rf /sysroot/tmp/fix_capabilities.lst
}

prescript
{% if bool(p['bmcsetup']) and p['setupbmc'] %}
bmcsetup
{% end %}
partscript
download_torrent
change_net
postscript
fix_capabilities
update_status "install.success"
